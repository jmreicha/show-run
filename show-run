#!/usr/bin/env bash

# A convenience wrapper to show what's running in your Kubernetes cluster

set -eou pipefail

# Turn on extra output if "DEBUG" is set on command line
if [[ "${DEBUG:-}" ]]; then
    set -x
fi

CLUSTER_NAME=$(kubectl config view | grep current-context | awk '{print $2}')
CURRENT_NS=$(kubectl config view | grep namespace | awk '{print $2}')

red () { printf "\033[1;31m%s\033[0m\n" "$*"; }
blue () { printf "\033[1;34m%s\033[0m\n" "$*"; }
green () { printf "\033[1;32m%s\033[0m\n" "$*"; }
yellow () { printf "\033[1;33m%s\033[0m\n" "$*"; }

_get_help () {
cat <<EOF
Usage: kubectl show run [command]

Commands:

    images  Show pods and the images they use
    uptime  Show the uptime for pods and nodes
    help    Display this message

Example:

$ kubectl show run images

EOF
}

_get_images_and_pods () {
    local ns=$1
    declare -a pods
    declare -A pods_and_images

    # We have to use special logic for printing all namespaces
    if [[ "$ns" = "all" ]]; then
        pods_and_images=$(kubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{@.metadata.name}{" "}{@.spec.containers[*].image}{"\n"}{end}')

        blue "All Pods and images"
        echo
        (printf "POD\tIMAGE\n"

        # Set IFS here to newline so that we can grab both columns
        IFS=$'\n'
        for row in ${pods_and_images[*]}; do
            pod=$(echo "$row" | awk '{print $1}')
            images=$(echo "$row" | awk '{$1=""; print}')

            # We have to iterate over images if there is more than one
            unset IFS
            if [[ $(echo "$images" | wc -w) -gt 1 ]]; then
                for image in $images; do
                    printf '%s\t%s\n' "$pod" "$image"
                done
            else
                printf '%s\t%s\n' "$pod" "$images"
            fi
        done) | column -t -x
        return
    elif [[ -n "$ns" ]]; then
        pods=$(kubectl get pods -n "$ns" | awk '{if(NR>1)print $1}')
        for pod in ${pods[*]}; do
            image=$(kubectl get pod "$pod" -n "$ns" -o json | jq -j '[.spec.containers[].image] | join(" ")')
            pods_and_images[$pod]+="$image"
        done
        blue "Pods and images running in $ns namespace"
        echo
    else
        pods=$(kubectl get pods | awk '{if(NR>1)print $1}')
        for pod in ${pods[*]}; do
            image=$(kubectl get pod "$pod" -o json | jq -j '[.spec.containers[].image] | join(" ")')
            pods_and_images[$pod]+="$image"
        done
        blue "Pods and images running in $CURRENT_NS namespace"
        echo
    fi

    # Evaluate in a subshell so we can match the column headers
    (printf "POD\tIMAGE\n"
    # Formatting for pods with multiple containers/images
    for pods in "${!pods_and_images[@]}"; do
        if [[ $(echo "${pods_and_images[$pods]}" | wc -w) -gt 1 ]]; then
            # Iterate over entries that have more than one value
            for pod_image in ${pods_and_images[$pods]}; do
                printf '%s\t%s\n' "$pods" "$pod_image"
            done
        else
            printf '%s\t%s\n' "$pods" "${pods_and_images[$pods]}"
        fi
    done) | column -t -x
}

# Print the last restart time for each pod
_get_pod_restart_time () {
    blue "Last restart time for pods in $CURRENT_NS namespace"
    echo
}

# Print the last restart time for each node
_get_node_restart_time () {
    blue "Last reboot time for nodes in cluster $CLUSTER_NAME"
    echo
}

main () {
    set +u
    option=$1
    set -u

    case $option in
        images)
            shift
            _get_images_and_pods "$*"
            ;;
        uptime)
            shift
            _get_restart_time "$*"
            ;;
        *)
            _get_help
            ;;
    esac
}

main "$@"

